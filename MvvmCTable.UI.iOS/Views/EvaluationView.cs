// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using MvvmCross.Binding.BindingContext;
using MvvmCross.iOS.Views;
using MvvmCTable.core;
using UIKit;

namespace MvvmCTable.UI.iOS
{
	[MvxFromStoryboard(StoryboardName = "Evaluation")]
	public partial class EvaluationView : MvxViewController<EvaluationViewModel>
	{
		#region Constructor

		CollectionViewSource _collectionViewSource;
		protected EvaluationViewModel EvaluationViewModel => ViewModel as EvaluationViewModel;

		public EvaluationView(IntPtr handle) : base(handle)
		{
		}

		#endregion


		int count,no;

		#region view life Cycle

		public override void ViewDidLoad()
		{
			_collectionViewSource = new CollectionViewSource(collection_View);
			base.ViewDidLoad();
			count = 0;
			no = 0;




			MvxFluentBindingDescriptionSet<EvaluationView, EvaluationViewModel> set =
			   this.CreateBindingSet<EvaluationView, EvaluationViewModel>();

			set.Bind(_collectionViewSource).To(vm => vm.jack);

			set.Apply();

			collection_View.Source = _collectionViewSource;


			collection_View.ReloadData();
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);
			//stack_View.Frame.Size = new CoreGraphics.CGSize(stack_View.Frame.Size.Width, 58);
		}

		public override void ViewDidAppear(bool animated)
		{
			base.ViewDidAppear(animated);
			scroll_View.ContentSize = new CoreGraphics.CGSize(scroll_View.Frame.Size.Width, 900.0);
		}

		#endregion

		#region IBAction
		partial void prs_Add(NSObject sender)
		{
			if (!(count < 6))
			{
				return;
			}
			  count++;
			
			//var btn_Add = (UIButton)sender as UIButton;

			var view_ = this.View.ViewWithTag(count) as UIView;
			view_.Hidden = false;
		}

		partial void prs_Remover(NSObject sender)
		{
			if (!(count > 0))
			{
				return;
			}


			//var btn_Add = (UIButton)sender as UIButton;

			var view_ = this.View.ViewWithTag(count) as UIView;
			view_.Hidden = true;
			count--;
		}

		partial void prs_Btn(NSObject sender)
		{
			no++;
			var stackView = this.View.ViewWithTag(40) as UIStackView;
			var viewF = stackView.ArrangedSubviews[0];
			var viewS = stackView.ArrangedSubviews[1];
			var viewT = stackView.ArrangedSubviews[2];

			if (no == 1)
			{
				viewS.Hidden = false;

			}
			else if (no == 2)
			{ 
			   viewT.Hidden = false;
			}

			if (no > 2)
			{
				no--;

				if (no == 1)
				{
					viewS.Hidden = true;

				}
				else if (no == 2)
				{
					viewT.Hidden = true;
				}
			}
		}

       #endregion
	}
}
